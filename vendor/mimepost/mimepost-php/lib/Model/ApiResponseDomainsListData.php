<?php
/**
 * ApiResponseDomainsListData
 *
 * PHP version 5
 *
 * @category Class
 * @package  MimePost\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MimePost API Reference (Beta)
 *
 * MimePost API for sending email.  You can find out more about MimePost at [https://mimepost.com](http://mimepost.com). For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@mimepost.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.18
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MimePost\Client\Model;

use \ArrayAccess;
use \MimePost\Client\ObjectSerializer;

/**
 * ApiResponseDomainsListData Class Doc Comment
 *
 * @category Class
 * @package  MimePost\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiResponseDomainsListData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApiResponseDomainsList_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'domain' => 'string',
        'selector' => 'string',
        'instance_name' => 'string',
        'spf_verified' => 'int',
        'dkim_verified' => 'int',
        'tracking_verified' => 'int',
        'verified' => 'int',
        'approved' => 'int',
        'status' => 'string',
        'status_desc' => 'string',
        'entered' => 'string',
        'active' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'domain' => null,
        'selector' => null,
        'instance_name' => null,
        'spf_verified' => null,
        'dkim_verified' => null,
        'tracking_verified' => null,
        'verified' => null,
        'approved' => null,
        'status' => null,
        'status_desc' => null,
        'entered' => null,
        'active' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'domain' => 'domain',
        'selector' => 'selector',
        'instance_name' => 'instance_name',
        'spf_verified' => 'spf_verified',
        'dkim_verified' => 'dkim_verified',
        'tracking_verified' => 'tracking_verified',
        'verified' => 'verified',
        'approved' => 'approved',
        'status' => 'status',
        'status_desc' => 'status_desc',
        'entered' => 'entered',
        'active' => 'active'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'domain' => 'setDomain',
        'selector' => 'setSelector',
        'instance_name' => 'setInstanceName',
        'spf_verified' => 'setSpfVerified',
        'dkim_verified' => 'setDkimVerified',
        'tracking_verified' => 'setTrackingVerified',
        'verified' => 'setVerified',
        'approved' => 'setApproved',
        'status' => 'setStatus',
        'status_desc' => 'setStatusDesc',
        'entered' => 'setEntered',
        'active' => 'setActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'domain' => 'getDomain',
        'selector' => 'getSelector',
        'instance_name' => 'getInstanceName',
        'spf_verified' => 'getSpfVerified',
        'dkim_verified' => 'getDkimVerified',
        'tracking_verified' => 'getTrackingVerified',
        'verified' => 'getVerified',
        'approved' => 'getApproved',
        'status' => 'getStatus',
        'status_desc' => 'getStatusDesc',
        'entered' => 'getEntered',
        'active' => 'getActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_WAITING_APPROVA = 'WAITING_APPROVA';
    const STATUS_NOT_VERIFIED = 'NOT_VERIFIED';
    const STATUS_APPROVED = 'APPROVED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_WAITING_APPROVA,
            self::STATUS_NOT_VERIFIED,
            self::STATUS_APPROVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['selector'] = isset($data['selector']) ? $data['selector'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['spf_verified'] = isset($data['spf_verified']) ? $data['spf_verified'] : null;
        $this->container['dkim_verified'] = isset($data['dkim_verified']) ? $data['dkim_verified'] : null;
        $this->container['tracking_verified'] = isset($data['tracking_verified']) ? $data['tracking_verified'] : null;
        $this->container['verified'] = isset($data['verified']) ? $data['verified'] : null;
        $this->container['approved'] = isset($data['approved']) ? $data['approved'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_desc'] = isset($data['status_desc']) ? $data['status_desc'] : null;
        $this->container['entered'] = isset($data['entered']) ? $data['entered'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets selector
     *
     * @return string
     */
    public function getSelector()
    {
        return $this->container['selector'];
    }

    /**
     * Sets selector
     *
     * @param string $selector selector
     *
     * @return $this
     */
    public function setSelector($selector)
    {
        $this->container['selector'] = $selector;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name instance_name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets spf_verified
     *
     * @return int
     */
    public function getSpfVerified()
    {
        return $this->container['spf_verified'];
    }

    /**
     * Sets spf_verified
     *
     * @param int $spf_verified spf_verified
     *
     * @return $this
     */
    public function setSpfVerified($spf_verified)
    {
        $this->container['spf_verified'] = $spf_verified;

        return $this;
    }

    /**
     * Gets dkim_verified
     *
     * @return int
     */
    public function getDkimVerified()
    {
        return $this->container['dkim_verified'];
    }

    /**
     * Sets dkim_verified
     *
     * @param int $dkim_verified dkim_verified
     *
     * @return $this
     */
    public function setDkimVerified($dkim_verified)
    {
        $this->container['dkim_verified'] = $dkim_verified;

        return $this;
    }

    /**
     * Gets tracking_verified
     *
     * @return int
     */
    public function getTrackingVerified()
    {
        return $this->container['tracking_verified'];
    }

    /**
     * Sets tracking_verified
     *
     * @param int $tracking_verified tracking_verified
     *
     * @return $this
     */
    public function setTrackingVerified($tracking_verified)
    {
        $this->container['tracking_verified'] = $tracking_verified;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return int
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param int $verified verified
     *
     * @return $this
     */
    public function setVerified($verified)
    {
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return int
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param int $approved approved
     *
     * @return $this
     */
    public function setApproved($approved)
    {
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_desc
     *
     * @return string
     */
    public function getStatusDesc()
    {
        return $this->container['status_desc'];
    }

    /**
     * Sets status_desc
     *
     * @param string $status_desc status_desc
     *
     * @return $this
     */
    public function setStatusDesc($status_desc)
    {
        $this->container['status_desc'] = $status_desc;

        return $this;
    }

    /**
     * Gets entered
     *
     * @return string
     */
    public function getEntered()
    {
        return $this->container['entered'];
    }

    /**
     * Sets entered
     *
     * @param string $entered entered
     *
     * @return $this
     */
    public function setEntered($entered)
    {
        $this->container['entered'] = $entered;

        return $this;
    }

    /**
     * Gets active
     *
     * @return int
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param int $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


